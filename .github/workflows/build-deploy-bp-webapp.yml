# Author: Noel McKeown (TUD)
# Student Number: x00218705
# Date: Dec-2024
# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.

name: Build and deploy BP Calculator ASP.Net Core app to an Azure Web App

env:
  AZURE_WEBAPP_NAME: ca1app             # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: '.'  # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '6'                   # set this to the .NET Core version to use
  URI: https://ca1app.azurewebsites.net/    

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # build source code and run unit tests
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4   

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: Run UNIT Tests
        run: |
          dotnet test BPCalcUnit/BPCalcUnitTests.csproj --collect "XPlat Code Coverage"
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:"./BPCalcUnit/TestResults/*/coverage.cobertura.xml" -targetdir:"./BPCalcUnit/coverage-report" -reporttypes:Html

      - name: Run Acceptance Tests
        run: dotnet test BPCalcAcceptance/BPCalcAcceptance.csproj --collect "Code Coverage"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: ./BPCalcUnit/TestResults/

      - name: Upload Coverage Report HTML
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: ./BPCalcUnit/coverage-report/

      - name: Upload BDD Report
        uses: actions/upload-artifact@v4
        with:
          name: bdd-coverage
          path: ./BPCalcAcceptance/TestResults/

      - name: Check Env
        run: echo "DOTNET_ROOT="${{ env.DOTNET_ROOT }}

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{ env.DOTNET_ROOT }}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  # code analysis for bugs, code smells and vulns
  scan_code:
    name: Static Code Analysis
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=nmckeown
            -Dsonar.projectKey=nmckeown_blood-pressure-calc-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     

  # scans code depenencies for security vulns
  owasp_dependency_check:
    name: OWASP Depenency Check
    needs: scan_code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'BMI'
          path: '.'
          format: 'HTML'    
          args: >
            --failOnCVSS 8            
          # fail if CVSS score (CVE scoring system) is High >=8
          
      - name: Upload Test results
        uses: actions/upload-artifact@v4
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  # deploy code to webapp service
  deploy:
    name: Deploy BP WebApp
    needs: owasp_dependency_check
    permissions:
      contents: none
    runs-on: ubuntu-latest
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'

      - name: debug
        run: |
          echo "AZURE_WEBAPP_PACKAGE_PATH="${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          pwd
          ls -latR

      - name: Run Selenium Tests
        run: dotnet test  ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/net-app/SeleniumTest.dll /Settings:SeleniumTest.runsettings --logger:"trx;LogFileName=selenium.trx"

      # Upload results of selenium tests
      - uses: actions/upload-artifact@v4
        with:
          name: Selenium Tests Results
          path: TestResults/selenium.trx
  
  # e2e selenium tests
  #e2e_tests:
  #  name: E2E Selenium Tests
  #  needs: deploy
  #  runs-on: ubuntu-latest

  #  steps:
  #  - name: Run Selenium tests
  #    run: dotnet test ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp/SeleniumTest.dll /Settings:SeleniumTest.runsettings --logger:"trx;LogFileName=selenium.trx"
  
    # Upload results of selenium tests
  #  - uses: actions/upload-artifact@v4
  #    with:
  #      name: Selenium Tests Results
  #      path: TestResults/selenium.trx

  # baseline app security scan / pen test
  zap_baseline_scan:
    name: Zap Pen Test
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: Pull Docker image for ZAP
      run: docker pull zaproxy/zap-weekly

    - name: Run baseline scan
      run: docker run -v /report:/zap/wrk/:rw --user root -t zaproxy/zap-weekly zap-baseline.py -t ${{env.URI}} -I -r zapreport.html
  
    - uses: actions/upload-artifact@v4
      name: upload ZAP report
      with:
        name: ZAPreport
        path: /report/zapreport.html

  # performance / load testing
  k6_load_test:
    name: K6 Perf Testing
    needs: zap_baseline_scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Pull Docker image for k6
      run: docker pull grafana/k6

    - name: Run k6 load test, capture report
      run: docker run -i grafana/k6 run - <k6tests/perf2.js > k6report.txt

    - uses: actions/upload-artifact@v4
      with:
        name: k6report
        path: k6report.txt